/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx_hal.h"
#include "string.h"

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;
SPI_HandleTypeDef hspi1;
GPIO_InitTypeDef GPIO_InitStruct = {0};

// Status do alarme
uint8_t alarmEnabled = 1;
uint8_t motionDetected = 0;

// Buffer para armazenar UID do cartão RFID
uint8_t validCardUID[4] = {0x12, 0x34, 0x56, 0x78}; // Substitua com o UID do seu cartão
uint8_t cardUID[10];
uint8_t cardUIDSize = 0;

/* Definições --------------------------------------------------------------- */
#define MAX_LEN 16  // Tamanho máximo do buffer RFID

// Definições do RFID RC522
#define RC522_CS_PIN GPIO_PIN_4
#define RC522_CS_PORT GPIOA
#define RC522_SCK_PIN GPIO_PIN_5
#define RC522_MISO_PIN GPIO_PIN_6
#define RC522_MOSI_PIN GPIO_PIN_7
#define RC522_RST_PIN GPIO_PIN_3
#define RC522_RST_PORT GPIOA

// Definições do MFRC522
#define PCD_IDLE              0x00
#define PCD_AUTHENT           0x0E
#define PCD_RECEIVE           0x08
#define PCD_TRANSMIT          0x04
#define PCD_TRANSCEIVE        0x0C
#define PCD_RESETPHASE        0x0F
#define PCD_CALCCRC           0x03

#define PICC_REQIDL           0x26
#define PICC_REQALL           0x52
#define PICC_ANTICOLL         0x93
#define PICC_SElECTTAG        0x93
#define PICC_AUTHENT1A        0x60
#define PICC_AUTHENT1B        0x61
#define PICC_READ             0x30
#define PICC_WRITE            0xA0
#define PICC_DECREMENT        0xC0
#define PICC_INCREMENT        0xC1
#define PICC_RESTORE          0xC2
#define PICC_TRANSFER         0xB0
#define PICC_HALT             0x50

// Registradores do MFRC522
#define CommandReg            0x01
#define ComIEnReg             0x02
#define ComIrqReg             0x04
#define DivIrqReg             0x05
#define ErrorReg              0x06
#define Status1Reg            0x07
#define Status2Reg            0x08
#define FIFODataReg           0x09
#define FIFOLevelReg          0x0A
#define ControlReg            0x0C
#define BitFramingReg         0x0D
#define ModeReg               0x11
#define TxControlReg          0x14
#define TxASKReg              0x15
#define TPrescalerReg         0x2B
#define TReloadRegH           0x2C
#define TReloadRegL           0x2D

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_SPI1_Init(void);
void startBuzzer(void);
void stopBuzzer(void);
void MFRC522_Init(void);
void MFRC522_WriteRegister(uint8_t addr, uint8_t val);
uint8_t MFRC522_ReadRegister(uint8_t addr);
uint8_t MFRC522_Check(uint8_t* id);
uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID);
void MFRC522_Reset(void);
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType);
uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen);
uint8_t MFRC522_Anticoll(uint8_t* serNum);
void MFRC522_CalculateCRC(uint8_t* pIndata, uint8_t len, uint8_t* pOutData);
uint8_t MFRC522_SelectTag(uint8_t* serNum);
void MFRC522_Halt(void);

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_SPI1_Init();

  // Inicializar o módulo RFID
  MFRC522_Init();

  uint8_t status;
  uint8_t str[MAX_LEN];

  while (1)
  {
    // Verifica se detectou movimento (se PA1 está em HIGH)
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
    {
      motionDetected = 1;
    }

    // Se o alarme estiver ativado e movimento for detectado, aciona o buzzer
    if (alarmEnabled && motionDetected)
    {
      startBuzzer();
    }
    else
    {
      stopBuzzer();
    }

    // Verificar a presença de um cartão RFID
    status = MFRC522_Request(PICC_REQIDL, str);
    if (status == 0)  // Cartão detectado
    {
      status = MFRC522_Anticoll(cardUID);
      if (status == 0)
      {
        // Verificar se o cartão é o autorizado
        if (MFRC522_Compare(cardUID, validCardUID))
        {
          alarmEnabled = !alarmEnabled;  // Alterna o estado do alarme
          motionDetected = 0;            // Reseta a detecção de movimento

          // Dá um feedback através do buzzer (um bipe curto)
          startBuzzer();
          HAL_Delay(100);
          stopBuzzer();
          HAL_Delay(100);

          if (alarmEnabled)
          {
            // Dois bipes curtos para indicar que o alarme foi ativado
            startBuzzer();
            HAL_Delay(100);
            stopBuzzer();
            HAL_Delay(100);
            startBuzzer();
            HAL_Delay(100);
            stopBuzzer();
          }

          // Aguarda o cartão ser removido
          HAL_Delay(1000);
        }
      }
    }

    // Pequeno delay para não sobrecarregar o processador
    HAL_Delay(100);
  }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /* Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 100-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  HAL_TIM_Base_Init(&htim2);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);

  HAL_TIM_PWM_Init(&htim2);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 500;  // 50% duty cycle
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  HAL_SPI_Init(&hspi1);
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /* Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RC522_CS_PIN | RC522_RST_PIN, GPIO_PIN_SET);

  /* Configure PA0 for TIM2 CH1 (Buzzer PWM) */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* Configure PA1 as input (Motion Sensor) */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* Configure PA3 as output (RC522 RST) */
  GPIO_InitStruct.Pin = RC522_RST_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(RC522_RST_PORT, &GPIO_InitStruct);

  /* Configure PA4 as output (RC522 CS) */
  GPIO_InitStruct.Pin = RC522_CS_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(RC522_CS_PORT, &GPIO_InitStruct);

  /* Configure PA5, PA6, PA7 for SPI1 (RC522) */
  GPIO_InitStruct.Pin = RC522_SCK_PIN | RC522_MISO_PIN | RC522_MOSI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

/**
  * @brief  Start buzzer with PWM
  * @retval None
  */
void startBuzzer(void)
{
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}

/**
  * @brief  Stop buzzer
  * @retval None
  */
void stopBuzzer(void)
{
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}

/* MFRC522 Functions Implementation */

/**
  * @brief  Initialize MFRC522 RFID reader
  * @retval None
  */
void MFRC522_Init(void)
{
  MFRC522_Reset();

  MFRC522_WriteRegister(TPrescalerReg, 0x3E);
  MFRC522_WriteRegister(TReloadRegL, 30);
  MFRC522_WriteRegister(TReloadRegH, 0);
  MFRC522_WriteRegister(TxASKReg, 0x40);
  MFRC522_WriteRegister(ModeReg, 0x3D);

  // Turn on antenna
  uint8_t temp = MFRC522_ReadRegister(TxControlReg);
  if (!(temp & 0x03)) {
    MFRC522_WriteRegister(TxControlReg, temp | 0x03);
  }
}

/**
  * @brief  Reset MFRC522
  * @retval None
  */
void MFRC522_Reset(void)
{
  // Software reset
  MFRC522_WriteRegister(CommandReg, PCD_RESETPHASE);

  // Hardware reset
  HAL_GPIO_WritePin(RC522_RST_PORT, RC522_RST_PIN, GPIO_PIN_RESET);
  HAL_Delay(1);
  HAL_GPIO_WritePin(RC522_RST_PORT, RC522_RST_PIN, GPIO_PIN_SET);
  HAL_Delay(50);
}

/**
  * @brief  Write to MFRC522 register
  * @param  addr: Address of the register
  * @param  val: Value to be written
  * @retval None
  */
void MFRC522_WriteRegister(uint8_t addr, uint8_t val)
{
  // Address format: 0XXXXXX0 where X is address
  addr = (addr << 1) & 0x7E;

  // CS low
  HAL_GPIO_WritePin(RC522_CS_PORT, RC522_CS_PIN, GPIO_PIN_RESET);

  // Transmit address byte and data byte
  HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
  HAL_SPI_Transmit(&hspi1, &val, 1, 100);

  // CS high
  HAL_GPIO_WritePin(RC522_CS_PORT, RC522_CS_PIN, GPIO_PIN_SET);
}

/**
  * @brief  Read from MFRC522 register
  * @param  addr: Address of the register
  * @retval uint8_t: Value read from register
  */
uint8_t MFRC522_ReadRegister(uint8_t addr)
{
  uint8_t val;

  // Address format: 1XXXXXX0 where X is address
  addr = ((addr << 1) & 0x7E) | 0x80;

  // CS low
  HAL_GPIO_WritePin(RC522_CS_PORT, RC522_CS_PIN, GPIO_PIN_RESET);

  // Transmit address byte and receive data byte
  HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
  HAL_SPI_Receive(&hspi1, &val, 1, 100);

  // CS high
  HAL_GPIO_WritePin(RC522_CS_PORT, RC522_CS_PIN, GPIO_PIN_SET);

  return val;
}

/**
  * @brief  Request card
  * @param  reqMode: Request mode
  * @param  TagType: Type of tag
  * @retval uint8_t: Status
  */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType)
{
  uint8_t status;
  uint16_t backBits;
  uint8_t cmd[2];

  MFRC522_WriteRegister(BitFramingReg, 0x07);

  cmd[0] = reqMode;
  status = MFRC522_ToCard(PCD_TRANSCEIVE, cmd, 1, TagType, &backBits);

  return status;
}

/**
  * @brief  Anti-collision detection
  * @param  serNum: Serial number
  * @retval uint8_t: Status
  */
uint8_t MFRC522_Anticoll(uint8_t* serNum)
{
  uint8_t status;
  uint8_t i;
  uint8_t serNumCheck = 0;
  uint16_t unLen;
  uint8_t buff[9];

  MFRC522_WriteRegister(BitFramingReg, 0x00);

  buff[0] = PICC_ANTICOLL;
  buff[1] = 0x20;

  status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 2, buff, &unLen);

  if (status == 0) {
    for (i = 0; i < 4; i++) {
      serNum[i] = buff[i];
      serNumCheck ^= buff[i];
    }

    if (serNumCheck != buff[i]) {
      status = 1;
    }
  }

  return status;
}

/**
  * @brief  Calculate CRC
  * @param  pIndata: Input data
  * @param  len: Length of data
  * @param  pOutData: Output data
  * @retval None
  */
void MFRC522_CalculateCRC(uint8_t* pIndata, uint8_t len, uint8_t* pOutData)
{
  uint8_t i, n;

  MFRC522_WriteRegister(CommandReg, PCD_IDLE);
  MFRC522_WriteRegister(DivIrqReg, 0x04);
  MFRC522_WriteRegister(FIFOLevelReg, 0x80);

  for (i = 0; i < len; i++) {
    MFRC522_WriteRegister(FIFODataReg, *(pIndata+i));
  }

  MFRC522_WriteRegister(CommandReg, PCD_CALCCRC);

  i = 255;
  do {
    n = MFRC522_ReadRegister(DivIrqReg);
    i--;
  }
  while ((i != 0) && !(n & 0x04));

  pOutData[0] = MFRC522_ReadRegister(CRCResultRegL);
  pOutData[1] = MFRC522_ReadRegister(CRCResultRegH);
}

/**
  * @brief  Select tag
  * @param  serNum: Serial number
  * @retval uint8_t: Size of the tag
  */
uint8_t MFRC522_SelectTag(uint8_t* serNum)
{
  uint8_t i;
  uint8_t status;
  uint8_t size;
  uint16_t recvBits;
  uint8_t buffer[9];

  buffer[0] = PICC_SElECTTAG;
  buffer[1] = 0x70;

  for (i = 0; i < 4; i++) {
    buffer[i+2] = *(serNum+i);
  }

  MFRC522_CalculateCRC(buffer, 6, &buffer[6]);

  status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 8, buffer, &recvBits);

  if ((status == 0) && (recvBits == 0x18)) {
    size = buffer[0];
  }
  else {
    size = 0;
  }

  return size;
}

/**
  * @brief  Halt card
  * @retval None
  */
void MFRC522_Halt(void)
{
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
  buff[1] = 0;
  MFRC522_CalculateCRC(buff, 2, &buff[2]);

  MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
}

/**
  * @brief  Communication between RC522 and ISO14443
  * @param  command: Command to send
  * @param  sendData: Data to send
  * @param  sendLen: Length of data to send
  * @param  backData: Data to receive
  * @param  backLen: Length of data received
  * @retval uint8_t: Status
  */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen)
{
  uint8_t status = 0;
  uint8_t irqEn = 0x00;
  uint8_t waitIRq = 0x00;
  uint8_t lastBits;
  uint8_t n;
  uint16_t i;

  switch (command)
  {
    case PCD_AUTHENT:
      irqEn = 0x12;
      waitIRq = 0x10;
      break;
    case PCD_TRANSCEIVE:
      irqEn = 0x77;
      waitIRq = 0x30;
      break;
    default:
      break;
  }

  MFRC522_WriteRegister(ComIEnReg, irqEn | 0x80);
  MFRC522_WriteRegister(ComIrqReg, 0x7F);
  MFRC522_WriteRegister(FIFOLevelReg, 0x80);
  MFRC522_WriteRegister(CommandReg, PCD_IDLE);

  for (i = 0; i < sendLen; i++)
  {
    MFRC522_WriteRegister(FIFODataReg, sendData[i]);
  }

  MFRC522_WriteRegister(CommandReg, command);

  if (command == PCD_TRANSCEIVE)
  {
    MFRC522_WriteRegister(BitFramingReg, MFRC522_ReadRegister(BitFramingReg) | 0x80);
  }

  i = 2000;
  do
  {
    n = MFRC522_ReadRegister(ComIrqReg);
    i--;
  }
  while ((i != 0) && !(n & 0x01) && !(n & waitIRq));

  MFRC522_WriteRegister(BitFramingReg, 0x00);

  if (i != 0)
  {
    if (!(MFRC522_ReadRegister(ErrorReg) & 0x1B))
    {
      status = 0;

      if (n & irqEn & 0x01)
      {
        status = 2;
      }

      if (command == PCD_TRANSCEIVE)
      {
        n = MFRC522_ReadRegister(FIFOLevelReg);
        lastBits = MFRC522_ReadRegister(ControlReg) & 0x07;

        if (lastBits)
        {
          *backLen = (n - 1) * 8 + lastBits;
        }
        else
        {
          *backLen = n * 8;
        }

        if (n == 0)
        {
          n = 1;
        }

        if (n > 16)
        {
          n = 16;
        }

        for (i = 0; i < n; i++)
        {
          backData[i] = MFRC522_ReadRegister(FIFODataReg);
        }
      }
    }
    else
    {
      status = 1;
    }
  }

  return status;
}

/**
  * @brief  Check if the card is present
  * @param  id: Card ID
  * @retval uint8_t: Status
  */
uint8_t MFRC522_Check(uint8_t* id)
{
  uint8_t status;
  uint8_t str[MAX_LEN];

  status = MFRC522_Request(PICC_REQIDL, str);
  if (status == 0)
  {
    status = MFRC522_Anticoll(str);
    if (status == 0)
    {
      memcpy(id, str, 4);
    }
  }

  MFRC522_Halt();

  return status;
}

/**
  * @brief  Compare two IDs
  * @param  CardID: First ID
  * @param  CompareID: Second ID
  * @retval uint8_t: Result of comparison
  */
uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID)
{
  uint8_t i;

  for (i = 0; i < 4; i++)
  {
    if (CardID[i] != CompareID[i])
    {
      return 0;
    }
  }

  return 1;
}
